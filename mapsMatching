#!/usr/bin/env python

# -*- coding: utf-8 -*-

"""
Created on Thu Sep  5 10:09:21 2019
@author: Matan Samina
"""
import rospy
import numpy as np
from rospy_tutorials.msg import Floats # for landmarks array
from rospy.numpy_msg import numpy_msg # for landmarks array 
import matplotlib.pyplot as plt
from sklearn.neighbors import NearestNeighbors # for KNN algorithm
from geometry_msgs.msg import Transform # for transpose of map
import operator
from scipy.optimize import differential_evolution
import copy
import pandas as pd
import os
from joblib import Parallel, delayed
import multiprocessing



class DE():
    
    def __init__(self):

        self.pub = rospy.Publisher('/TM2', Transform , queue_size=1000 )
        rospy.init_node('listener', anonymous=True)
       
        # creat first particales 
       

        # convert maps to landmarks arrays:
        self.oMap = maps("LM1")
        self.anti_oMap = maps("LM1_anti")
        self.tMap = maps("LM2")
        self.anti_tMap = maps("LM2_anti")
        self.best_score = 0
        self.realT = np.array([-1.5 , -2.5 , 90]) # real transformation

        self.N_eff = 1
        self.itr = 0
        self.prob = 0.1

        self.K = 1 # time step for norm2

        self.Nde = []
        self.NtPF = []
        self.resample_counter = 0
        self.init = True
        while not rospy.is_shutdown():

        
            if self.oMap.started and self.tMap.started and self.anti_oMap.started and self.anti_tMap.started:
                
                #init nbrs for KNN
                self.nbrs = NearestNeighbors(n_neighbors= 1, algorithm='ball_tree').fit(self.oMap.map)
               
                # DE algorithm for finding best match
                result = differential_evolution(self.func_de, bounds = [(-10,10),(-10,10),(0,360)] ,maxiter= 200 ,popsize=6,tol=0.0001)
                self.T_de = [result.x[0] , result.x[1] , min(result.x[2], 360 - result.x[2])] 
                print (self.T_de)

                if self.N_eff < 0.001 and self.resample_counter>10:
                    self.resampling() # start re-sampling step 
                    self.resample_counter = 0

                self.plotmaps() # plot landmarks of maps.
                self.oMap.started = False
                self.tMap.started = False
                self.anti_oMap.started = False
                self.anti_tMap.started = False

    def save_data_DE(self):

        if os.path.isfile('~/DE.csv'):
            with open('~/DE.csv', 'a') as f:
                self.save_stat_DE('~/DE.csv', ex = True, f=f)
        else:
            self.save_stat_DE('~/DE.csv', ex = False)

        print ('data has been saved')

    def save_stat_DE(self,file_path, ex, f = None):

        data = {'De': self.Nde }
                
        df = pd.DataFrame(data, columns= ['De'])

        if ex==False:
            df.to_csv(file_path, sep='\t')
        else:
            df.to_csv(f, sep='\t', header=False)

    def func_de(self , T):

        X = self.tMap.rotate(T)

        var = 0.16        
        # fit data of map 2 to map 1  
        distances, indices = self.nbrs.kneighbors(X)
        # find the propability 
        prob = (1/(np.sqrt(2*np.pi*var)))*np.exp(-np.power(distances,2)/(2*var)) 
        # returm the 'weight' of this transformation
        wiegth = np.sum((prob)/prob.shape[0])+0.000001 #np.sum(prob)

        return -wiegth # de algo minimized this value
        
    def plotmaps(self):

        #plt.axis([-60, 60, -60, 60])
        plt.subplot(2,1,1)
        plt.axis([-50+self.oMap.cm[0], 50+self.oMap.cm[0], -50+self.oMap.cm[1], 50+self.oMap.cm[1]])
        #plt.axis([-30, 30, -30, 30])
        plt.scatter(self.maxMap[: , 0] ,self.maxMap[:,1] , color = 'b') # plot tPF map
        plt.scatter(self.oMap.map[: , 0] ,self.oMap.map[:,1] ,color = 'r') # plot origin map
        plt.subplot(2,1,2)
        plt.scatter(self.pf_debug[:,0], self.pf_debug[:,1])

        #plt.scatter(self.de_map[: , 0] ,self.de_map[:,1] , color = 'g') # plot DE map
        plt.pause(0.05)
        plt.clf()

class rot(object):
    
    # define 'rot' to be the class of the rotation for resamplimg filter

    def __init__(self , theta , xShift , yShift):

         self.theta , self.x , self.y, self.score = theta , xShift ,yShift , 0 

    def weight(self , oMap , tMap , nbrs , factor ):
        
        var = 0.16
        # fit data of map 2 to map 1  
        distances, indices = nbrs.kneighbors(tMap)
        # find the propability 
        prob = (1/(np.sqrt(2*np.pi*var)))*np.exp(-np.power(distances,2)/(2*var)) 
        # returm the 'weight' of this transformation
        wiegth = np.sum((prob)/prob.shape[0])+0.000001 #np.sum(prob) 
        
        self.score += wiegth * factor # sum up score

    def weight2(self , oMap , tMap, oMap_anti , tMap_anti , oMap_nbrs , alpha,  factor ):
        var1 = 0.1
        var2 = 0.016
        tMap_distances, _ = oMap_nbrs.kneighbors(tMap)
        tMap_anti_distances, _ = oMap_nbrs.kneighbors(tMap_anti)
        tMap_prob = (1/(np.sqrt(2*np.pi*var1)))*np.exp(-np.power(tMap_distances,2)/(2*var1)) 
        tMap_anti_prob = (1/(np.sqrt(2*np.pi*var2)))*np.exp(-np.power(tMap_anti_distances,2)/(2*var2))
        tMap_w = np.sum((tMap_prob)/tMap_prob.shape[0])+0.000001
        tMap_anti_w = 1/(np.sum((tMap_anti_prob)/tMap_anti_prob.shape[0])+0.000001)       
        self.score += (tMap_w**alpha)*(tMap_anti_w**(1-alpha))* factor 

class maps:

    def __init__(self , topic_name ):
        
        self.check = True
        self.started = False # indicate if msg recived
        self.map = None #landmarks array
        self.cm = None
        self.name = topic_name

        rospy.Subscriber( topic_name , numpy_msg(Floats) , self.callback)
               
    def callback(self ,data):
        # reshape array from 1D to 2D
        landmarks = np.reshape(data.data, (-1, 2))
        # finding C.M for the first iterration

        if self.check:
            # determin the center of the map for initilaized map origin
            self.cm = np.sum(np.transpose(landmarks),axis=1)/len(landmarks)
            print ('set origin of: '), (self.name)
            self.check = False
            
        self.map = np.array(landmarks , dtype= "int32")# - self.cm.T
        #print self.map
        self.started = True

    def rotate(self, T): #rotat map for DE
      
        theta = np.radians(T[2]) # angles to radians
        c ,s = np.cos(theta) , np.sin(theta)
        R = np.array(((c,-s), (s, c))) #Rotation matrix
        RotatedLandmarks = np.matmul( self.map , R ) + np.array([T[0] , T[1]]) # matrix multiplation

        return  RotatedLandmarks
   
if __name__ == '__main__':
   
    print ("Running")
    DEtry = DE() # 'DE' : DEFFRENTIAL EVULOTION
    rospy.spin()